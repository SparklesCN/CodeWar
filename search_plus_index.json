{"./":{"url":"./","title":"Introduction","keywords":"","body":"代码之争 The CodeWar https://sparklescn.github.io/CodeWar/ Auto GitBook Publish Script Using, check master branch for commit comments; Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/":{"url":"interview_guide/","title":"Interview Guide","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_1/":{"url":"interview_guide/chapter_1/","title":"章节一：Stack & Queue","keywords":"","body":"本章节含括基本的 栈 与 队列 的问题； Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_1/1_1.html":{"url":"interview_guide/chapter_1/1_1.html","title":"1. Stack with getMin","keywords":"","body":"Stack with getMin(); [Page Num: 1] [Problem Description] 实现一个特殊的栈，包括栈的所有基础功能（push, pop, peek）; 同时还要实现getMin() 功能 [Difficulty: 1/4] [Problem Requirement] 1. pop, push, getMin all with time complexity O(1); 2. You are allowd to use build-in stack structure; [Design] 设计两个Stack, 其中一个Stack用于正常存放数据，另一个Stack则单独存储当前Min值； 1. 在任何时候，数据都会正常存入stackData; 2. 每次向stackData push数据之前，将栈顶数据与新数据比较，再次向stackData push更小的那一个数据； [CodeWar] import java.io.*; import java.util.*; public class MyStack { private Stack stackData(); private Stack stackMin(); public MyStack() { // stackData use to store data; this.stackData = new Stack; // stackMin use to recored Min data; this.stackMin = new Stack; } // Push correct element into both stackData and stackMin; public void push(int newNum) { // push newNum into stackMin strightly while stackMin is Empty; if (this.stackMin.isEmpty()) { this.stackMin.push(newNum); } // if newNum smaller than peek element of stackMin, push it on top; else if(newNum [Testing] public static void main(String[] args) { MyStack minStack = new MyStack(); minStack.push(5); System.out.println(\"current Min: \" + minStack.getMin()); System.out.println(\"shoule be: 5\"); minStack.push(4); System.out.println(\"current Min: \" + minStack.getMin()); System.out.println(\"shoule be: 4\"); minStack.push(1); System.out.println(\"current Min: \" + minStack.getMin()); System.out.println(\"shoule be: 1\"); minStack.push(3); System.out.println(\"current Min: \" + minStack.getMin()); System.out.println(\"shoule be: 1\"); minStack.push(2); System.out.println(\"current Min: \" + minStack.getMin()); System.out.println(\"shoule be: 1\"); } /* current Min: 5 shoule be: 5 current Min: 4 shoule be: 4 current Min: 1 shoule be: 1 current Min: 1 shoule be: 1 current Min: 1 shoule be: 1 */ Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_1/1_2.html":{"url":"interview_guide/chapter_1/1_2.html","title":"2. Two Stacks Queue","keywords":"","body":"Two Stacks Queue [Page Num: 5] [Problem Description] 用两个Stack栈来构造一个可以使用的Queue队列结构； 满足先进先出的规则； [Difficulty: 2/4] [Problem Requirnment] 1. Time Complexity shoud be O(1); 2. All function should be functionally works; 3. Only two stacks allowed to use; [Design] Stack栈的特征是first in last out即先进后出； Queue队列的特征是first in first out即先进先出; 就此特征，我们可以在向栈_1放入新的数据之前， 将所有原始数据按照栈的顺序依次pop到栈_2中， 然后再将新数据push进栈_1底部， 最后再依次将栈_2中数据pop回栈_1中； 这样我们就在栈_1中模拟了队列的情况； [CodeWar] import java.io.*; import java.util.*; public class TwoStacksQueue { public Stack stack_1; public Stack stack_2; public TwoStacksQueue() { this.stack_1 = new Stack(); this.stack_2 = new Stack(); } // basic add method for TwoStacksQueue; public void add(int newNum) { // move all elements from stack_1 to stack_2; while (!this.stack_1.isEmpty()) { this.stack_2.push(this.stack_1.pop()); } // push newNum into the empty stack_1; this.stack_1.push(newNum); // move all elements from stack_2 back to stack_1; while (!this.stack_2.isEmpty()) { this.stack_1.push(this.stack_2.pop()); } } // basic pull method for TwoStacksQueue; public int pull() { // normally pop element out from stack_1 and return it; return this.stack_1.pop(); } // basic return the top element in TwoStacksQueue; public int peek() { return this.stack_1.peek(); } } [Testing] public static void main(String[] args) { // test queue; TwoStacksQueue queue = new TwoStacksQueue(); queue.add(1); queue.add(2); queue.add(3); System.out.println(\"output is: \" + queue.peek()); System.out.println(\"should be: 1\"); System.out.println(\"output is: \" + queue.pull()); System.out.println(\"should be: 1\"); System.out.println(\"output is: \" + queue.pull()); System.out.println(\"should be: 2\"); System.out.println(\"output is: \" + queue.peek()); System.out.println(\"should be: 3\"); } /* output is: 1 should be: 1 output is: 1 should be: 1 output is: 2 should be: 2 output is: 3 should be: 3 */ Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_1/1_3.html":{"url":"interview_guide/chapter_1/1_3.html","title":"3. Recursively Reverse Stack","keywords":"","body":"Reverse a Stack [Page Num: 7] [Problem Description] Recursively reverse a stack; [Difficulty: 2/4] [Problem Requirnment] The only Stack you are allowed to use is which one you need to reverse; Recursively; [Design] Since we are not allow to use second Stack for help, we have to use temp memory to record the temp data each time; In other words, we need to use recursive to solve this problem; We gonna need two methods; 1. A method which could return and remove last element in a stack; Generally, the first recursive method should be two parts; First, remove and return last element in a stack; Second, make sure the stack looks same as before unless the last element been removed; 2. A method use to reverse a stack by useing method 1; In this method, we have to use temp memory to store our temp data since we don't have extra stack to store data; The norm way to do this is that use method to get last element of a stack, and recursively get the last element of the new stack until it's empty; Then put all \"last element\" back to the stack in ordered; [CodeWar] import java.io.*; import java.util.*; public class ReverseStack { public static int getAndRemoveLastElement(Stack stack) { int result = stack.pop(); if (stack.isEmpty()) { return result; } else { int lastElement = getAndRemoveLastElement(stack); stack.push(result); return lastElement; } } public static void reverseStack(Stack stack) { if (stack.isEmpty()) { return; } else { int temp = getAndRemoveLastElement(stack); reverseStack(stack); stack.push(temp); } } } [Testing] public static void main(String[] args) { Stack stack = new Stack(); stack.push(1); stack.push(2); stack.push(3); stack.push(4); stack.push(5); // original stack String values = Arrays.toString(stack.toArray()); System.out.print(\"Current Stack Bottom->Top \"); System.out.println(values); // test for getAndRemoveLastElement getAndRemoveLastElement(stack); values = Arrays.toString(stack.toArray()); System.out.print(\"Current Stack Bottom->Top \"); System.out.println(values); // test for reverseStack reverseStack(stack); values = Arrays.toString(stack.toArray()); System.out.print(\"Current Stack Bottom->Top \"); System.out.println(values); // test for push stack.push(1); values = Arrays.toString(stack.toArray()); System.out.print(\"Current Stack Bottom->Top \"); System.out.println(values); } /* Current Stack Bottom->Top [1, 2, 3, 4, 5] Current Stack Bottom->Top [2, 3, 4, 5] Current Stack Bottom->Top [5, 4, 3, 2] Current Stack Bottom->Top [5, 4, 3, 2, 1] */ Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_1/1_4.html":{"url":"interview_guide/chapter_1/1_4.html","title":"4. Cat & Dog Problem - TODO","keywords":"","body":"Auto test public class Test { public static void main(String[] args) { System.out.println(\"Hello World!\"); System.out.println(\"1_4\"); } } Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_1/1_5.html":{"url":"interview_guide/chapter_1/1_5.html","title":"5. Sort Stack by Stack","keywords":"","body":"Sort Stack by another Stack [Page Num: 12] [Problem Description] 给定一个乱序Stack，要求在仅借助另外一个辅助Stack来完成对原始Stack的排序； 排序要求：Top -> Bottom High -> Low [Difficulty: 1/4] [Problem Requirnment] 仅可借助另外1个辅助Stack； [Design] ref: textbook pg:12 1. 将要排序的栈记为stack，另一个辅助栈记为help。 在stack执行pop操作，弹出top值并记录返回出的top值为temp; 2. 如果cur小于或等于help的栈顶元素，则将cur正常压入help； 3. 否则，则按顺序将help中所有元素弹出，并压入stack。 当help栈空之后，将存下的temp压入help底部； 重复执行操作1； [CodeWar] import java.io.*; import java.util.*; public class SortStack { // use another temp stack to sort input stack public static void sortStack(Stack stack) { // declare the help stack; Stack help = new Stack(); // loop until input stack was empty, which means sort completed; while(!stack.isEmpty()) { int temp = stack.pop(); while (!help.isEmpty() && help.peek() [Testing] public static void main(String[] args) { Stack stack = new Stack(); stack.push(3); stack.push(1); stack.push(2); stack.push(5); stack.push(4); // original stack String values = Arrays.toString(stack.toArray()); System.out.print(\"Current Stack Bottom->Top \"); System.out.println(values); sortStack(stack); values = Arrays.toString(stack.toArray()); System.out.print(\"Current Stack Bottom->Top \"); System.out.println(values); } /* public static void main(String[] args) { Stack stack = new Stack(); stack.push(3); stack.push(1); stack.push(2); stack.push(5); stack.push(4); // original stack String values = Arrays.toString(stack.toArray()); System.out.print(\"Current Stack Bottom->Top \"); System.out.println(values); sortStack(stack); values = Arrays.toString(stack.toArray()); System.out.print(\"Current Stack Bottom->Top \"); System.out.println(values); } */ Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_2/":{"url":"interview_guide/chapter_2/","title":"章节二：Linked List","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_2/2_1.html":{"url":"interview_guide/chapter_2/2_1.html","title":"1. Print Common Part of Two Orderd Linked Lists","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"interview_guide/chapter_2/2_2.html":{"url":"interview_guide/chapter_2/2_2.html","title":"2. Delete the Node in k to last of Linked List and Double Linked List","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"leetcode/":{"url":"leetcode/","title":"LeetCode","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"leetcode/easy/":{"url":"leetcode/easy/","title":"Difficulty: EASY","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"leetcode/easy/1.html":{"url":"leetcode/easy/1.html","title":"1. Two Sum","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"leetcode/medium/":{"url":"leetcode/medium/","title":"Difficulty: MEDIUM","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"leetcode/medium/2.html":{"url":"leetcode/medium/2.html","title":"2. Add Two Numbers","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"leetcode/hard/":{"url":"leetcode/hard/","title":"Difficulty: HARD","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"leetcode/hard/4.html":{"url":"leetcode/hard/4.html","title":"4. Median of Two Sorted Arrays","keywords":"","body":"TODO: Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"collections/":{"url":"collections/","title":"Collections","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"collections/huawei/":{"url":"collections/huawei/","title":"华为","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"collections/huawei/1/1.html":{"url":"collections/huawei/1/1.html","title":"剔除字符串中重复字符","keywords":"","body":"Remove Repeat Chars in String [Source: HUA WEI] [Problem Description] 给出一个字符串，将重复的字符去除，仅保留第一次出现的字符，且保持去重后的字符在原字符串中的顺序不变。 [Difficulty: EASY] [Problem Requirnment] 输入数据是一个字符串（不包含空格） 输出去重后的字符串 输入：12ere2 输出：12er [Design] 1. 将字符串转为字符列表； 2. 用HashMap存下每个字符第一次出现的Index； 3. 遍历整个字符串列表，仅保留符合HashMap记录数据的字符； [CodeWar] import java.io.*; import java.util.*; public class removeRepeats { public static String removeRepeat (String input) { char[] inputArray = input.toCharArray(); Map map = new HashMap(); int counter = 0; for (int i = 0; i [Testing] public static void main(String[] args) { String test_1 = \"abacbd\"; System.out.print(\"output is: \"); System.out.println(removeRepeat(test_1)); System.out.println(\"should be: abcd\"); String test_2 = \"abc\"; System.out.print(\"output is: \"); System.out.println(removeRepeat(test_2)); System.out.println(\"should be: abc\"); String test_3 = \"aaa\"; System.out.print(\"output is: \"); System.out.println(removeRepeat(test_3)); System.out.println(\"should be: a\"); String test_4 = \"aabbccdd\"; System.out.print(\"output is: \"); System.out.println(removeRepeat(test_4)); System.out.println(\"should be: abcd\"); String test_5 = \"12ere2\"; System.out.print(\"output is: \"); System.out.println(removeRepeat(test_5)); System.out.println(\"should be: 12er\"); /* output is: abcd should be: abcd output is: abc should be: abc output is: a should be: a output is: abcd should be: abcd output is: 12er should be: 12er */ } Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:23:23 "},"knowledge/":{"url":"knowledge/","title":"Basic Knowledge","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/languages/":{"url":"knowledge/languages/","title":"Languages","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:49 "},"knowledge/languages/java/":{"url":"knowledge/languages/java/","title":"Java","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/languages/python/":{"url":"knowledge/languages/python/","title":"Python","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/languages/javaScript/":{"url":"knowledge/languages/javaScript/","title":"JavaScript","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/languages/c/":{"url":"knowledge/languages/c/","title":"C","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/languages/cpp/":{"url":"knowledge/languages/cpp/","title":"C++","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/languages/swift/":{"url":"knowledge/languages/swift/","title":"Swift","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/languages/html5_css3/":{"url":"knowledge/languages/html5_css3/","title":"HTML5 && CSS3","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/tools/":{"url":"knowledge/tools/","title":"Tools","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:44:48 "},"knowledge/tools/git/":{"url":"knowledge/tools/git/","title":"Git","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/tools/docker/":{"url":"knowledge/tools/docker/","title":"Docker","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/tools/mySql/":{"url":"knowledge/tools/mySql/","title":"MySQL","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/gameDevelopment/":{"url":"knowledge/gameDevelopment/","title":"Game Development","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:45:54 "},"knowledge/gameDevelopment/unity3D/":{"url":"knowledge/gameDevelopment/unity3D/","title":"Unity3D","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "},"knowledge/gameDevelopment/unreal4/":{"url":"knowledge/gameDevelopment/unreal4/","title":"Unreal 4","keywords":"","body":"TODO Copyright © sparklscn.com 2019 all right reserved，powered by GitbookLast update： 2019-08-06 21:35:21 "}}